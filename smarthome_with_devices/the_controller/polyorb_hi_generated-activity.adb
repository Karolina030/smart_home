--------------------------------------------------------
--  This file was automatically generated by Ocarina  --
--  Do NOT hand-modify this file, as your             --
--  changes will be lost when you re-run Ocarina      --
--------------------------------------------------------
pragma Style_Checks
 ("NM32766");

with PolyORB_HI.Port_Kinds;
with PolyORB_HI_Generated.Marshallers;
with PolyORB_HI_Generated.Transport;
with PolyORB_HI.Thread_Interrogators;
pragma Elaborate_All (PolyORB_HI.Thread_Interrogators);
with PolyORB_HI_Generated.Subprograms;

package body PolyORB_HI_Generated.Activity is

  --  BEGIN: Data types used by all instances of component ReadMotion.impl

  type syst_ReadMotion_impl_Integer_Array is
   array (syst_ReadMotion_impl_Port_Type)
     of Standard.Integer;

  type syst_ReadMotion_impl_Port_Kind_Array is
   array (syst_ReadMotion_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_The_Controller_1_Max_Port_Image_Size is
   Integer range 1 .. PolyORB_HI_Generated.Deployment.Max_Port_Image_Size;

  subtype UT_Activity_The_Controller_syst_ReadMotion_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_The_Controller_1_Max_Port_Image_Size);

  type syst_ReadMotion_impl_Port_Image_Array is
   array (syst_ReadMotion_impl_Port_Type)
     of UT_Activity_The_Controller_syst_ReadMotion_impl_Port_Image_Array_Component;

  type syst_ReadMotion_impl_Address_Array is
   array (syst_ReadMotion_impl_Port_Type)
     of System.Address;

  type syst_ReadMotion_impl_Overflow_Protocol_Array is
   array (syst_ReadMotion_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component ReadMotion.impl

  syst_the_thread_motion_Port_Kinds : constant syst_ReadMotion_impl_Port_Kind_Array :=
   (motion_in =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    motion_out =>
     PolyORB_HI.Port_Kinds.Out_Data_Port);

  syst_the_thread_motion_Port_Images : constant syst_ReadMotion_impl_Port_Image_Array :=
   (motion_in =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.the_controller_the_thread_motion_motion_in_K),
    motion_out =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.the_controller_the_thread_motion_motion_out_K));

  syst_the_thread_motion_FIFO_Sizes : constant syst_ReadMotion_impl_Integer_Array :=
   (motion_in =>
     1,
    motion_out =>
     -1);

  syst_the_thread_motion_Offsets : constant syst_ReadMotion_impl_Integer_Array :=
   (motion_in =>
     1,
    motion_out =>
     0);

  syst_the_thread_motion_Overflow_Protocols : constant syst_ReadMotion_impl_Overflow_Protocol_Array :=
   (motion_in =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    motion_out =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  syst_the_thread_motion_Urgencies : constant syst_ReadMotion_impl_Integer_Array :=
   (motion_in =>
     0,
    motion_out =>
     0);

  syst_the_thread_motion_Total_FIFO_Size : constant Standard.Integer :=
   1;

  type UT_Activity_The_Controller_the_thread_motion_motion_out_Destinations_Array is
   array (Standard.Positive range <>)
     of PolyORB_HI_Generated.Deployment.Port_Type;

  the_thread_motion_motion_out_Destinations : constant UT_Activity_The_Controller_the_thread_motion_motion_out_Destinations_Array :=
   UT_Activity_The_Controller_the_thread_motion_motion_out_Destinations_Array'
     (1 =>
       PolyORB_HI_Generated.Deployment.the_controller_the_thread_control_motion_in_K);

  syst_the_thread_motion_N_Destinations : constant syst_ReadMotion_impl_Integer_Array :=
   (motion_in =>
     0,
    motion_out =>
     1);

  the_thread_motion_Destinations : constant syst_ReadMotion_impl_Address_Array :=
   (motion_in =>
     System.null_Address,
    motion_out =>
     the_thread_motion_motion_out_Destinations'Address);

  package syst_the_thread_motion_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => syst_ReadMotion_impl_Port_Type,
      Integer_Array => syst_ReadMotion_impl_Integer_Array,
      Port_Kind_Array => syst_ReadMotion_impl_Port_Kind_Array,
      Port_Image_Array => syst_ReadMotion_impl_Port_Image_Array,
      Address_Array => syst_ReadMotion_impl_Address_Array,
      Overflow_Protocol_Array => syst_ReadMotion_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => syst_ReadMotion_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.the_controller_the_thread_motion_K,
      Thread_Port_Kinds => syst_the_thread_motion_Port_Kinds,
      Has_Event_Ports => False,
      Thread_Port_Images => syst_the_thread_motion_Port_Images,
      Thread_Fifo_Sizes => syst_the_thread_motion_FIFO_Sizes,
      Thread_Fifo_Offsets => syst_the_thread_motion_Offsets,
      Thread_Overflow_Protocols => syst_the_thread_motion_Overflow_Protocols,
      Urgencies => syst_the_thread_motion_Urgencies,
      Global_Data_Queue_Size => syst_the_thread_motion_Total_FIFO_Size,
      N_Destinations => syst_the_thread_motion_N_Destinations,
      Destinations => the_thread_motion_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => syst_the_thread_motion_Task.Next_Deadline);

  --  Periodic task : the_thread_motion

  --------------------------------
  -- syst_the_thread_motion_Job -- 
  --------------------------------

  function syst_the_thread_motion_Job return PolyORB_HI.Errors.Error_Kind is
    motion_in_V : PolyORB_HI_Generated.Types.State;
    motion_out_V : PolyORB_HI_Generated.Types.State;
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    if (syst_the_thread_motion_Interrogators.Get_Count
     (motion_in)
      /= -1)
    then
      motion_in_V :=
       syst_the_thread_motion_Interrogators.Get_Value
         (motion_in).motion_in_DATA;
    else
      motion_in_V :=
       PolyORB_HI_Generated.Types.State_Default_Value;
    end if;
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.syst_Motion_Processing
     (movement_data => motion_in_V,
      person_in_room => motion_out_V);
    --  Set the call sequence OUT port values
    syst_the_thread_motion_Interrogators.Put_Value
     (syst_ReadMotion_impl_Interface'
       (Port => motion_out,
        motion_out_DATA => motion_out_V));
    --  Send the call sequence OUT port values
    Error_Ü :=
     syst_the_thread_motion_Interrogators.Send_Output
       (motion_out);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end syst_the_thread_motion_Job;

  --  BEGIN: Data types used by all instances of component ControlRules.impl

  type syst_ControlRules_impl_Integer_Array is
   array (syst_ControlRules_impl_Port_Type)
     of Standard.Integer;

  type syst_ControlRules_impl_Port_Kind_Array is
   array (syst_ControlRules_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_The_Controller_syst_ControlRules_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_The_Controller_1_Max_Port_Image_Size);

  type syst_ControlRules_impl_Port_Image_Array is
   array (syst_ControlRules_impl_Port_Type)
     of UT_Activity_The_Controller_syst_ControlRules_impl_Port_Image_Array_Component;

  type syst_ControlRules_impl_Address_Array is
   array (syst_ControlRules_impl_Port_Type)
     of System.Address;

  type syst_ControlRules_impl_Overflow_Protocol_Array is
   array (syst_ControlRules_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component ControlRules.impl

  syst_the_thread_control_Port_Kinds : constant syst_ControlRules_impl_Port_Kind_Array :=
   (video_not_recognized =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    motion_in =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    gate_in =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    out_data =>
     PolyORB_HI.Port_Kinds.Out_Data_Port,
    camera_out =>
     PolyORB_HI.Port_Kinds.Out_Event_Port);

  syst_the_thread_control_Port_Images : constant syst_ControlRules_impl_Port_Image_Array :=
   (video_not_recognized =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.the_controller_the_thread_control_video_not_recognized_K),
    motion_in =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.the_controller_the_thread_control_motion_in_K),
    gate_in =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.the_controller_the_thread_control_gate_in_K),
    out_data =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.the_controller_the_thread_control_out_data_K),
    camera_out =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.the_controller_the_thread_control_camera_out_K));

  syst_the_thread_control_FIFO_Sizes : constant syst_ControlRules_impl_Integer_Array :=
   (video_not_recognized =>
     1,
    motion_in =>
     1,
    gate_in =>
     1,
    out_data =>
     -1,
    camera_out =>
     -1);

  syst_the_thread_control_Offsets : constant syst_ControlRules_impl_Integer_Array :=
   (video_not_recognized =>
     1,
    motion_in =>
     2,
    gate_in =>
     3,
    out_data =>
     0,
    camera_out =>
     0);

  syst_the_thread_control_Overflow_Protocols : constant syst_ControlRules_impl_Overflow_Protocol_Array :=
   (video_not_recognized =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    motion_in =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    gate_in =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    out_data =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    camera_out =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  syst_the_thread_control_Urgencies : constant syst_ControlRules_impl_Integer_Array :=
   (video_not_recognized =>
     0,
    motion_in =>
     0,
    gate_in =>
     0,
    out_data =>
     0,
    camera_out =>
     0);

  syst_the_thread_control_Total_FIFO_Size : constant Standard.Integer :=
   3;

  syst_the_thread_control_N_Destinations : constant syst_ControlRules_impl_Integer_Array :=
   (video_not_recognized =>
     0,
    motion_in =>
     0,
    gate_in =>
     0,
    out_data =>
     0,
    camera_out =>
     0);

  the_thread_control_Destinations : constant syst_ControlRules_impl_Address_Array :=
   (video_not_recognized =>
     System.null_Address,
    motion_in =>
     System.null_Address,
    gate_in =>
     System.null_Address,
    out_data =>
     System.null_Address,
    camera_out =>
     System.null_Address);

  package syst_the_thread_control_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => syst_ControlRules_impl_Port_Type,
      Integer_Array => syst_ControlRules_impl_Integer_Array,
      Port_Kind_Array => syst_ControlRules_impl_Port_Kind_Array,
      Port_Image_Array => syst_ControlRules_impl_Port_Image_Array,
      Address_Array => syst_ControlRules_impl_Address_Array,
      Overflow_Protocol_Array => syst_ControlRules_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => syst_ControlRules_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.the_controller_the_thread_control_K,
      Thread_Port_Kinds => syst_the_thread_control_Port_Kinds,
      Has_Event_Ports => True,
      Thread_Port_Images => syst_the_thread_control_Port_Images,
      Thread_Fifo_Sizes => syst_the_thread_control_FIFO_Sizes,
      Thread_Fifo_Offsets => syst_the_thread_control_Offsets,
      Thread_Overflow_Protocols => syst_the_thread_control_Overflow_Protocols,
      Urgencies => syst_the_thread_control_Urgencies,
      Global_Data_Queue_Size => syst_the_thread_control_Total_FIFO_Size,
      N_Destinations => syst_the_thread_control_N_Destinations,
      Destinations => the_thread_control_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => syst_the_thread_control_Task.Next_Deadline);

  --  Periodic task : the_thread_control

  ---------------------------------
  -- syst_the_thread_control_Job -- 
  ---------------------------------

  function syst_the_thread_control_Job return PolyORB_HI.Errors.Error_Kind is
    video_not_recognized_V : PolyORB_HI_Generated.Types.State;
    motion_in_V : PolyORB_HI_Generated.Types.State;
    gate_in_V : PolyORB_HI_Generated.Types.State;
    out_data_V : PolyORB_HI_Generated.Types.State;
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    if (syst_the_thread_control_Interrogators.Get_Count
     (video_not_recognized)
      /= -1)
    then
      video_not_recognized_V :=
       syst_the_thread_control_Interrogators.Get_Value
         (video_not_recognized).video_not_recognized_DATA;
    else
      video_not_recognized_V :=
       PolyORB_HI_Generated.Types.State_Default_Value;
    end if;
    if (syst_the_thread_control_Interrogators.Get_Count
     (motion_in)
      /= -1)
    then
      motion_in_V :=
       syst_the_thread_control_Interrogators.Get_Value
         (motion_in).motion_in_DATA;
    else
      motion_in_V :=
       PolyORB_HI_Generated.Types.State_Default_Value;
    end if;
    if (syst_the_thread_control_Interrogators.Get_Count
     (gate_in)
      /= -1)
    then
      gate_in_V :=
       syst_the_thread_control_Interrogators.Get_Value
         (gate_in).gate_in_DATA;
    else
      gate_in_V :=
       PolyORB_HI_Generated.Types.State_Default_Value;
    end if;
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.syst_Control_Processing
     (movement_data => motion_in_V,
      video_not_recognized => video_not_recognized_V,
      gate_in => gate_in_V,
      out_data => out_data_V);
    --  Set the call sequence OUT port values
    syst_the_thread_control_Interrogators.Put_Value
     (syst_ControlRules_impl_Interface'
       (Port => out_data,
        out_data_DATA => out_data_V));
    --  Send the call sequence OUT port values
    Error_Ü :=
     syst_the_thread_control_Interrogators.Send_Output
       (out_data);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end syst_the_thread_control_Job;

  --  BEGIN: Data types used by all instances of component AwakeMotion.impl

  type syst_AwakeMotion_impl_Integer_Array is
   array (syst_AwakeMotion_impl_Port_Type)
     of Standard.Integer;

  type syst_AwakeMotion_impl_Port_Kind_Array is
   array (syst_AwakeMotion_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_The_Controller_syst_AwakeMotion_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_The_Controller_1_Max_Port_Image_Size);

  type syst_AwakeMotion_impl_Port_Image_Array is
   array (syst_AwakeMotion_impl_Port_Type)
     of UT_Activity_The_Controller_syst_AwakeMotion_impl_Port_Image_Array_Component;

  type syst_AwakeMotion_impl_Address_Array is
   array (syst_AwakeMotion_impl_Port_Type)
     of System.Address;

  type syst_AwakeMotion_impl_Overflow_Protocol_Array is
   array (syst_AwakeMotion_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component AwakeMotion.impl

  syst_the_thread_awake_Port_Kinds : constant syst_AwakeMotion_impl_Port_Kind_Array :=
   (motion_in =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    motion_out =>
     PolyORB_HI.Port_Kinds.Out_Data_Port);

  syst_the_thread_awake_Port_Images : constant syst_AwakeMotion_impl_Port_Image_Array :=
   (motion_in =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.the_controller_the_thread_awake_motion_in_K),
    motion_out =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.the_controller_the_thread_awake_motion_out_K));

  syst_the_thread_awake_FIFO_Sizes : constant syst_AwakeMotion_impl_Integer_Array :=
   (motion_in =>
     1,
    motion_out =>
     -1);

  syst_the_thread_awake_Offsets : constant syst_AwakeMotion_impl_Integer_Array :=
   (motion_in =>
     1,
    motion_out =>
     0);

  syst_the_thread_awake_Overflow_Protocols : constant syst_AwakeMotion_impl_Overflow_Protocol_Array :=
   (motion_in =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    motion_out =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  syst_the_thread_awake_Urgencies : constant syst_AwakeMotion_impl_Integer_Array :=
   (motion_in =>
     0,
    motion_out =>
     0);

  syst_the_thread_awake_Total_FIFO_Size : constant Standard.Integer :=
   1;

  type UT_Activity_The_Controller_the_thread_awake_motion_out_Destinations_Array is
   array (Standard.Positive range <>)
     of PolyORB_HI_Generated.Deployment.Port_Type;

  the_thread_awake_motion_out_Destinations : constant UT_Activity_The_Controller_the_thread_awake_motion_out_Destinations_Array :=
   UT_Activity_The_Controller_the_thread_awake_motion_out_Destinations_Array'
     (1 =>
       PolyORB_HI_Generated.Deployment.the_controller_the_thread_awake_rules_motion_in_K);

  syst_the_thread_awake_N_Destinations : constant syst_AwakeMotion_impl_Integer_Array :=
   (motion_in =>
     0,
    motion_out =>
     1);

  the_thread_awake_Destinations : constant syst_AwakeMotion_impl_Address_Array :=
   (motion_in =>
     System.null_Address,
    motion_out =>
     the_thread_awake_motion_out_Destinations'Address);

  package syst_the_thread_awake_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => syst_AwakeMotion_impl_Port_Type,
      Integer_Array => syst_AwakeMotion_impl_Integer_Array,
      Port_Kind_Array => syst_AwakeMotion_impl_Port_Kind_Array,
      Port_Image_Array => syst_AwakeMotion_impl_Port_Image_Array,
      Address_Array => syst_AwakeMotion_impl_Address_Array,
      Overflow_Protocol_Array => syst_AwakeMotion_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => syst_AwakeMotion_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.the_controller_the_thread_awake_K,
      Thread_Port_Kinds => syst_the_thread_awake_Port_Kinds,
      Has_Event_Ports => False,
      Thread_Port_Images => syst_the_thread_awake_Port_Images,
      Thread_Fifo_Sizes => syst_the_thread_awake_FIFO_Sizes,
      Thread_Fifo_Offsets => syst_the_thread_awake_Offsets,
      Thread_Overflow_Protocols => syst_the_thread_awake_Overflow_Protocols,
      Urgencies => syst_the_thread_awake_Urgencies,
      Global_Data_Queue_Size => syst_the_thread_awake_Total_FIFO_Size,
      N_Destinations => syst_the_thread_awake_N_Destinations,
      Destinations => the_thread_awake_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => syst_the_thread_awake_Task.Next_Deadline);

  --  Periodic task : the_thread_awake

  -------------------------------
  -- syst_the_thread_awake_Job -- 
  -------------------------------

  function syst_the_thread_awake_Job return PolyORB_HI.Errors.Error_Kind is
    motion_in_V : PolyORB_HI_Generated.Types.State;
    motion_out_V : PolyORB_HI_Generated.Types.State;
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    if (syst_the_thread_awake_Interrogators.Get_Count
     (motion_in)
      /= -1)
    then
      motion_in_V :=
       syst_the_thread_awake_Interrogators.Get_Value
         (motion_in).motion_in_DATA;
    else
      motion_in_V :=
       PolyORB_HI_Generated.Types.State_Default_Value;
    end if;
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.syst_Awake_Processing
     (movement_data => motion_in_V,
      motion_out => motion_out_V);
    --  Set the call sequence OUT port values
    syst_the_thread_awake_Interrogators.Put_Value
     (syst_AwakeMotion_impl_Interface'
       (Port => motion_out,
        motion_out_DATA => motion_out_V));
    --  Send the call sequence OUT port values
    Error_Ü :=
     syst_the_thread_awake_Interrogators.Send_Output
       (motion_out);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end syst_the_thread_awake_Job;

  --  BEGIN: Data types used by all instances of component AwakeRules.impl

  type syst_AwakeRules_impl_Integer_Array is
   array (syst_AwakeRules_impl_Port_Type)
     of Standard.Integer;

  type syst_AwakeRules_impl_Port_Kind_Array is
   array (syst_AwakeRules_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_The_Controller_syst_AwakeRules_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_The_Controller_1_Max_Port_Image_Size);

  type syst_AwakeRules_impl_Port_Image_Array is
   array (syst_AwakeRules_impl_Port_Type)
     of UT_Activity_The_Controller_syst_AwakeRules_impl_Port_Image_Array_Component;

  type syst_AwakeRules_impl_Address_Array is
   array (syst_AwakeRules_impl_Port_Type)
     of System.Address;

  type syst_AwakeRules_impl_Overflow_Protocol_Array is
   array (syst_AwakeRules_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component AwakeRules.impl

  syst_the_thread_awake_rules_Port_Kinds : constant syst_AwakeRules_impl_Port_Kind_Array :=
   (motion_in =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    coffee_out =>
     PolyORB_HI.Port_Kinds.Out_Data_Port);

  syst_the_thread_awake_rules_Port_Images : constant syst_AwakeRules_impl_Port_Image_Array :=
   (motion_in =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.the_controller_the_thread_awake_rules_motion_in_K),
    coffee_out =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.the_controller_the_thread_awake_rules_coffee_out_K));

  syst_the_thread_awake_rules_FIFO_Sizes : constant syst_AwakeRules_impl_Integer_Array :=
   (motion_in =>
     1,
    coffee_out =>
     -1);

  syst_the_thread_awake_rules_Offsets : constant syst_AwakeRules_impl_Integer_Array :=
   (motion_in =>
     1,
    coffee_out =>
     0);

  syst_the_thread_awake_rules_Overflow_Protocols : constant syst_AwakeRules_impl_Overflow_Protocol_Array :=
   (motion_in =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    coffee_out =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  syst_the_thread_awake_rules_Urgencies : constant syst_AwakeRules_impl_Integer_Array :=
   (motion_in =>
     0,
    coffee_out =>
     0);

  syst_the_thread_awake_rules_Total_FIFO_Size : constant Standard.Integer :=
   1;

  syst_the_thread_awake_rules_N_Destinations : constant syst_AwakeRules_impl_Integer_Array :=
   (motion_in =>
     0,
    coffee_out =>
     0);

  the_thread_awake_rules_Destinations : constant syst_AwakeRules_impl_Address_Array :=
   (motion_in =>
     System.null_Address,
    coffee_out =>
     System.null_Address);

  package syst_the_thread_awake_rules_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => syst_AwakeRules_impl_Port_Type,
      Integer_Array => syst_AwakeRules_impl_Integer_Array,
      Port_Kind_Array => syst_AwakeRules_impl_Port_Kind_Array,
      Port_Image_Array => syst_AwakeRules_impl_Port_Image_Array,
      Address_Array => syst_AwakeRules_impl_Address_Array,
      Overflow_Protocol_Array => syst_AwakeRules_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => syst_AwakeRules_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.the_controller_the_thread_awake_rules_K,
      Thread_Port_Kinds => syst_the_thread_awake_rules_Port_Kinds,
      Has_Event_Ports => False,
      Thread_Port_Images => syst_the_thread_awake_rules_Port_Images,
      Thread_Fifo_Sizes => syst_the_thread_awake_rules_FIFO_Sizes,
      Thread_Fifo_Offsets => syst_the_thread_awake_rules_Offsets,
      Thread_Overflow_Protocols => syst_the_thread_awake_rules_Overflow_Protocols,
      Urgencies => syst_the_thread_awake_rules_Urgencies,
      Global_Data_Queue_Size => syst_the_thread_awake_rules_Total_FIFO_Size,
      N_Destinations => syst_the_thread_awake_rules_N_Destinations,
      Destinations => the_thread_awake_rules_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => syst_the_thread_awake_rules_Task.Next_Deadline);

  --  Periodic task : the_thread_awake_rules

  -------------------------------------
  -- syst_the_thread_awake_rules_Job -- 
  -------------------------------------

  function syst_the_thread_awake_rules_Job return PolyORB_HI.Errors.Error_Kind is
    motion_in_V : PolyORB_HI_Generated.Types.State;
    coffee_out_V : PolyORB_HI_Generated.Types.State;
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    if (syst_the_thread_awake_rules_Interrogators.Get_Count
     (motion_in)
      /= -1)
    then
      motion_in_V :=
       syst_the_thread_awake_rules_Interrogators.Get_Value
         (motion_in).motion_in_DATA;
    else
      motion_in_V :=
       PolyORB_HI_Generated.Types.State_Default_Value;
    end if;
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.syst_Awake_Processing_Rules
     (movement_data => motion_in_V,
      coffee_out => coffee_out_V);
    --  Set the call sequence OUT port values
    syst_the_thread_awake_rules_Interrogators.Put_Value
     (syst_AwakeRules_impl_Interface'
       (Port => coffee_out,
        coffee_out_DATA => coffee_out_V));
    --  Send the call sequence OUT port values
    Error_Ü :=
     syst_the_thread_awake_rules_Interrogators.Send_Output
       (coffee_out);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end syst_the_thread_awake_rules_Job;

  --  BEGIN: Data types used by all instances of component ProcessVideo.impl

  type syst_ProcessVideo_impl_Integer_Array is
   array (syst_ProcessVideo_impl_Port_Type)
     of Standard.Integer;

  type syst_ProcessVideo_impl_Port_Kind_Array is
   array (syst_ProcessVideo_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_The_Controller_syst_ProcessVideo_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_The_Controller_1_Max_Port_Image_Size);

  type syst_ProcessVideo_impl_Port_Image_Array is
   array (syst_ProcessVideo_impl_Port_Type)
     of UT_Activity_The_Controller_syst_ProcessVideo_impl_Port_Image_Array_Component;

  type syst_ProcessVideo_impl_Address_Array is
   array (syst_ProcessVideo_impl_Port_Type)
     of System.Address;

  type syst_ProcessVideo_impl_Overflow_Protocol_Array is
   array (syst_ProcessVideo_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component ProcessVideo.impl

  syst_the_thread_video_Port_Kinds : constant syst_ProcessVideo_impl_Port_Kind_Array :=
   (video_in =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    video_data_out =>
     PolyORB_HI.Port_Kinds.Out_Data_Port);

  syst_the_thread_video_Port_Images : constant syst_ProcessVideo_impl_Port_Image_Array :=
   (video_in =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.the_controller_the_thread_video_video_in_K),
    video_data_out =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.the_controller_the_thread_video_video_data_out_K));

  syst_the_thread_video_FIFO_Sizes : constant syst_ProcessVideo_impl_Integer_Array :=
   (video_in =>
     1,
    video_data_out =>
     -1);

  syst_the_thread_video_Offsets : constant syst_ProcessVideo_impl_Integer_Array :=
   (video_in =>
     1,
    video_data_out =>
     0);

  syst_the_thread_video_Overflow_Protocols : constant syst_ProcessVideo_impl_Overflow_Protocol_Array :=
   (video_in =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    video_data_out =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  syst_the_thread_video_Urgencies : constant syst_ProcessVideo_impl_Integer_Array :=
   (video_in =>
     0,
    video_data_out =>
     0);

  syst_the_thread_video_Total_FIFO_Size : constant Standard.Integer :=
   1;

  type UT_Activity_The_Controller_the_thread_video_video_data_out_Destinations_Array is
   array (Standard.Positive range <>)
     of PolyORB_HI_Generated.Deployment.Port_Type;

  the_thread_video_video_data_out_Destinations : constant UT_Activity_The_Controller_the_thread_video_video_data_out_Destinations_Array :=
   UT_Activity_The_Controller_the_thread_video_video_data_out_Destinations_Array'
     (1 =>
       PolyORB_HI_Generated.Deployment.the_controller_the_thread_control_video_not_recognized_K);

  syst_the_thread_video_N_Destinations : constant syst_ProcessVideo_impl_Integer_Array :=
   (video_in =>
     0,
    video_data_out =>
     2);

  the_thread_video_Destinations : constant syst_ProcessVideo_impl_Address_Array :=
   (video_in =>
     System.null_Address,
    video_data_out =>
     the_thread_video_video_data_out_Destinations'Address);

  package syst_the_thread_video_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => syst_ProcessVideo_impl_Port_Type,
      Integer_Array => syst_ProcessVideo_impl_Integer_Array,
      Port_Kind_Array => syst_ProcessVideo_impl_Port_Kind_Array,
      Port_Image_Array => syst_ProcessVideo_impl_Port_Image_Array,
      Address_Array => syst_ProcessVideo_impl_Address_Array,
      Overflow_Protocol_Array => syst_ProcessVideo_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => syst_ProcessVideo_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.the_controller_the_thread_video_K,
      Thread_Port_Kinds => syst_the_thread_video_Port_Kinds,
      Has_Event_Ports => False,
      Thread_Port_Images => syst_the_thread_video_Port_Images,
      Thread_Fifo_Sizes => syst_the_thread_video_FIFO_Sizes,
      Thread_Fifo_Offsets => syst_the_thread_video_Offsets,
      Thread_Overflow_Protocols => syst_the_thread_video_Overflow_Protocols,
      Urgencies => syst_the_thread_video_Urgencies,
      Global_Data_Queue_Size => syst_the_thread_video_Total_FIFO_Size,
      N_Destinations => syst_the_thread_video_N_Destinations,
      Destinations => the_thread_video_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => syst_the_thread_video_Task.Next_Deadline);

  --  Periodic task : the_thread_video

  -------------------------------
  -- syst_the_thread_video_Job -- 
  -------------------------------

  function syst_the_thread_video_Job return PolyORB_HI.Errors.Error_Kind is
    video_in_V : PolyORB_HI_Generated.Types.State;
    video_data_out_V : PolyORB_HI_Generated.Types.State;
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    if (syst_the_thread_video_Interrogators.Get_Count
     (video_in)
      /= -1)
    then
      video_in_V :=
       syst_the_thread_video_Interrogators.Get_Value
         (video_in).video_in_DATA;
    else
      video_in_V :=
       PolyORB_HI_Generated.Types.State_Default_Value;
    end if;
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.syst_Video_Processing
     (video_in => video_in_V,
      video_data_out => video_data_out_V);
    --  Set the call sequence OUT port values
    syst_the_thread_video_Interrogators.Put_Value
     (syst_ProcessVideo_impl_Interface'
       (Port => video_data_out,
        video_data_out_DATA => video_data_out_V));
    --  Send the call sequence OUT port values
    Error_Ü :=
     syst_the_thread_video_Interrogators.Send_Output
       (video_data_out);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end syst_the_thread_video_Job;

  --  BEGIN: Data types used by all instances of component CarCheck.impl

  type syst_CarCheck_impl_Integer_Array is
   array (syst_CarCheck_impl_Port_Type)
     of Standard.Integer;

  type syst_CarCheck_impl_Port_Kind_Array is
   array (syst_CarCheck_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Port_Kind;

  subtype UT_Activity_The_Controller_syst_CarCheck_impl_Port_Image_Array_Component is
   Standard.String
     (UT_Activity_The_Controller_1_Max_Port_Image_Size);

  type syst_CarCheck_impl_Port_Image_Array is
   array (syst_CarCheck_impl_Port_Type)
     of UT_Activity_The_Controller_syst_CarCheck_impl_Port_Image_Array_Component;

  type syst_CarCheck_impl_Address_Array is
   array (syst_CarCheck_impl_Port_Type)
     of System.Address;

  type syst_CarCheck_impl_Overflow_Protocol_Array is
   array (syst_CarCheck_impl_Port_Type)
     of PolyORB_HI.Port_Kinds.Overflow_Handling_Protocol;

  --  END: Data types used by all instances of component CarCheck.impl

  syst_the_thread_car_Port_Kinds : constant syst_CarCheck_impl_Port_Kind_Array :=
   (motion_in =>
     PolyORB_HI.Port_Kinds.In_Data_Port,
    motion_out =>
     PolyORB_HI.Port_Kinds.Out_Data_Port);

  syst_the_thread_car_Port_Images : constant syst_CarCheck_impl_Port_Image_Array :=
   (motion_in =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.the_controller_the_thread_car_motion_in_K),
    motion_out =>
     PolyORB_HI_Generated.Deployment.Port_Image
       (PolyORB_HI_Generated.Deployment.the_controller_the_thread_car_motion_out_K));

  syst_the_thread_car_FIFO_Sizes : constant syst_CarCheck_impl_Integer_Array :=
   (motion_in =>
     1,
    motion_out =>
     -1);

  syst_the_thread_car_Offsets : constant syst_CarCheck_impl_Integer_Array :=
   (motion_in =>
     1,
    motion_out =>
     0);

  syst_the_thread_car_Overflow_Protocols : constant syst_CarCheck_impl_Overflow_Protocol_Array :=
   (motion_in =>
     PolyORB_HI.Port_Kinds.Dropoldest,
    motion_out =>
     PolyORB_HI.Port_Kinds.Dropoldest);

  syst_the_thread_car_Urgencies : constant syst_CarCheck_impl_Integer_Array :=
   (motion_in =>
     0,
    motion_out =>
     0);

  syst_the_thread_car_Total_FIFO_Size : constant Standard.Integer :=
   1;

  type UT_Activity_The_Controller_the_thread_car_motion_out_Destinations_Array is
   array (Standard.Positive range <>)
     of PolyORB_HI_Generated.Deployment.Port_Type;

  the_thread_car_motion_out_Destinations : constant UT_Activity_The_Controller_the_thread_car_motion_out_Destinations_Array :=
   UT_Activity_The_Controller_the_thread_car_motion_out_Destinations_Array'
     (1 =>
       PolyORB_HI_Generated.Deployment.the_controller_the_thread_control_gate_in_K);

  syst_the_thread_car_N_Destinations : constant syst_CarCheck_impl_Integer_Array :=
   (motion_in =>
     0,
    motion_out =>
     1);

  the_thread_car_Destinations : constant syst_CarCheck_impl_Address_Array :=
   (motion_in =>
     System.null_Address,
    motion_out =>
     the_thread_car_motion_out_Destinations'Address);

  package syst_the_thread_car_Interrogators is
   new PolyORB_HI.Thread_Interrogators
     (Port_Type => syst_CarCheck_impl_Port_Type,
      Integer_Array => syst_CarCheck_impl_Integer_Array,
      Port_Kind_Array => syst_CarCheck_impl_Port_Kind_Array,
      Port_Image_Array => syst_CarCheck_impl_Port_Image_Array,
      Address_Array => syst_CarCheck_impl_Address_Array,
      Overflow_Protocol_Array => syst_CarCheck_impl_Overflow_Protocol_Array,
      Thread_Interface_Type => syst_CarCheck_impl_Interface,
      Current_Entity => PolyORB_HI_Generated.Deployment.the_controller_the_thread_car_K,
      Thread_Port_Kinds => syst_the_thread_car_Port_Kinds,
      Has_Event_Ports => False,
      Thread_Port_Images => syst_the_thread_car_Port_Images,
      Thread_Fifo_Sizes => syst_the_thread_car_FIFO_Sizes,
      Thread_Fifo_Offsets => syst_the_thread_car_Offsets,
      Thread_Overflow_Protocols => syst_the_thread_car_Overflow_Protocols,
      Urgencies => syst_the_thread_car_Urgencies,
      Global_Data_Queue_Size => syst_the_thread_car_Total_FIFO_Size,
      N_Destinations => syst_the_thread_car_N_Destinations,
      Destinations => the_thread_car_Destinations,
      Marshall => PolyORB_HI_Generated.Marshallers.Marshall,
      Send => PolyORB_HI_Generated.Transport.Send,
      Next_Deadline => syst_the_thread_car_Task.Next_Deadline);

  --  Periodic task : the_thread_car

  -----------------------------
  -- syst_the_thread_car_Job -- 
  -----------------------------

  function syst_the_thread_car_Job return PolyORB_HI.Errors.Error_Kind is
    motion_in_V : PolyORB_HI_Generated.Types.State;
    motion_out_V : PolyORB_HI_Generated.Types.State;
    Error_Ü : PolyORB_HI.Errors.Error_Kind;
    use type PolyORB_HI.Errors.Error_Kind;
  begin
    --  Get the IN port values
    if (syst_the_thread_car_Interrogators.Get_Count
     (motion_in)
      /= -1)
    then
      motion_in_V :=
       syst_the_thread_car_Interrogators.Get_Value
         (motion_in).motion_in_DATA;
    else
      motion_in_V :=
       PolyORB_HI_Generated.Types.State_Default_Value;
    end if;
    --  Call implementation
    PolyORB_HI_Generated.Subprograms.syst_Car_Processing
     (movement_data => motion_in_V,
      car_detected => motion_out_V);
    --  Set the call sequence OUT port values
    syst_the_thread_car_Interrogators.Put_Value
     (syst_CarCheck_impl_Interface'
       (Port => motion_out,
        motion_out_DATA => motion_out_V));
    --  Send the call sequence OUT port values
    Error_Ü :=
     syst_the_thread_car_Interrogators.Send_Output
       (motion_out);
    if (Error_Ü
      /= PolyORB_HI.Errors.Error_None)
    then
      return Error_Ü;
    end if;
    --  Return error code
    return Error_Ü;
  end syst_the_thread_car_Job;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ReadMotion_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return syst_the_thread_motion_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : syst_ReadMotion_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_motion_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ReadMotion_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_motion_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ReadMotion_impl_Port_Type)
   return syst_ReadMotion_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return syst_the_thread_motion_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ReadMotion_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return syst_the_thread_motion_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ReadMotion_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return syst_the_thread_motion_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ReadMotion_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return syst_the_thread_motion_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ReadMotion_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_motion_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : syst_ReadMotion_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_motion_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out syst_ReadMotion_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_motion_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ControlRules_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return syst_the_thread_control_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : syst_ControlRules_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_control_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ControlRules_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_control_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ControlRules_impl_Port_Type)
   return syst_ControlRules_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return syst_the_thread_control_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ControlRules_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return syst_the_thread_control_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ControlRules_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return syst_the_thread_control_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ControlRules_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return syst_the_thread_control_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ControlRules_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_control_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : syst_ControlRules_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_control_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out syst_ControlRules_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_control_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeMotion_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return syst_the_thread_awake_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : syst_AwakeMotion_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_awake_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeMotion_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_awake_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeMotion_impl_Port_Type)
   return syst_AwakeMotion_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return syst_the_thread_awake_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeMotion_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return syst_the_thread_awake_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeMotion_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return syst_the_thread_awake_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeMotion_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return syst_the_thread_awake_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeMotion_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_awake_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : syst_AwakeMotion_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_awake_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out syst_AwakeMotion_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_awake_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeRules_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return syst_the_thread_awake_rules_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : syst_AwakeRules_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_awake_rules_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeRules_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_awake_rules_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeRules_impl_Port_Type)
   return syst_AwakeRules_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return syst_the_thread_awake_rules_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeRules_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return syst_the_thread_awake_rules_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeRules_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return syst_the_thread_awake_rules_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeRules_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return syst_the_thread_awake_rules_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeRules_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_awake_rules_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : syst_AwakeRules_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_awake_rules_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out syst_AwakeRules_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_awake_rules_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ProcessVideo_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return syst_the_thread_video_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : syst_ProcessVideo_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_video_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ProcessVideo_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_video_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ProcessVideo_impl_Port_Type)
   return syst_ProcessVideo_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return syst_the_thread_video_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ProcessVideo_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return syst_the_thread_video_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ProcessVideo_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return syst_the_thread_video_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ProcessVideo_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return syst_the_thread_video_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ProcessVideo_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_video_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : syst_ProcessVideo_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_video_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out syst_ProcessVideo_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_video_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

  -----------------
  -- Send_Output -- 
  -----------------

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_CarCheck_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    return syst_the_thread_car_Interrogators.Send_Output
     (Port);
  end Send_Output;

  ---------------
  -- Put_Value -- 
  ---------------

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : syst_CarCheck_impl_Interface)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_car_Interrogators.Put_Value
     (Thread_Interface);
  end Put_Value;

  -------------------
  -- Receive_Input -- 
  -------------------

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_CarCheck_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_car_Interrogators.Receive_Input
     (Port);
  end Receive_Input;

  ---------------
  -- Get_Value -- 
  ---------------

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_CarCheck_impl_Port_Type)
   return syst_CarCheck_impl_Interface
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return syst_the_thread_car_Interrogators.Get_Value
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Value;

  ----------------
  -- Get_Sender -- 
  ----------------

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_CarCheck_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return syst_the_thread_car_Interrogators.Get_Sender
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Sender;

  ---------------
  -- Get_Count -- 
  ---------------

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_CarCheck_impl_Port_Type)
   return Standard.Integer
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return syst_the_thread_car_Interrogators.Get_Count
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Count;

  --------------------
  -- Get_Time_Stamp -- 
  --------------------

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_CarCheck_impl_Port_Type)
   return Ada.Real_Time.Time
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    pragma Warnings
     (Off,
      "*return*");
    return syst_the_thread_car_Interrogators.Get_Time_Stamp
     (Port);
    pragma Warnings
     (On,
      "*return*");
  end Get_Time_Stamp;

  ----------------
  -- Next_Value -- 
  ----------------

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_CarCheck_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_car_Interrogators.Next_Value
     (Port);
  end Next_Value;

  ----------------------------
  -- Store_Received_Message -- 
  ----------------------------

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : syst_CarCheck_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_car_Interrogators.Store_Received_Message
     (Thread_Interface,
      From,
      Time_Stamp);
  end Store_Received_Message;

  ------------------------------
  -- Wait_For_Incoming_Events -- 
  ------------------------------

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out syst_CarCheck_impl_Port_Type)
  is
    use PolyORB_HI_Generated.Deployment;
    pragma Unreferenced
     (Entity);
  begin
    syst_the_thread_car_Interrogators.Wait_For_Incoming_Events
     (Port);
  end Wait_For_Incoming_Events;

end PolyORB_HI_Generated.Activity;
