--------------------------------------------------------
--  This file was automatically generated by Ocarina  --
--  Do NOT hand-modify this file, as your             --
--  changes will be lost when you re-run Ocarina      --
--------------------------------------------------------
pragma Style_Checks
 ("NM32766");

with PolyORB_HI_Generated;
with PolyORB_HI.Marshallers_G;
pragma Elaborate_All (PolyORB_HI.Marshallers_G);

package body PolyORB_HI_Generated.Marshallers is

  --  Marshallers for interface type of thread readmotion.impl

  --------------
  -- Marshall -- 
  --------------

  procedure Marshall
   (Data : PolyORB_HI_Generated.Activity.syst_ReadMotion_impl_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    use PolyORB_HI_Generated.Activity;
  begin
    if (Data.Port
      = PolyORB_HI_Generated.Activity.motion_out)
    then
      PolyORB_HI_Generated.Marshallers.Marshall
       (Data.motion_out_DATA,
        Message);
    end if;
  end Marshall;

  ----------------
  -- Unmarshall -- 
  ----------------

  procedure Unmarshall
   (Port : PolyORB_HI_Generated.Activity.syst_ReadMotion_impl_Port_Type;
    Data : out PolyORB_HI_Generated.Activity.syst_ReadMotion_impl_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    motion_in_DATA : PolyORB_HI_Generated.Types.State;
    use PolyORB_HI_Generated.Activity;
  begin
    if (Port
      = PolyORB_HI_Generated.Activity.motion_in)
    then
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (motion_in_DATA,
        Message);
      Data :=
       PolyORB_HI_Generated.Activity.syst_ReadMotion_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.motion_in,
          motion_in_DATA => motion_in_DATA);
    end if;
  end Unmarshall;

  --  Marshallers for DATA type state

  package State_Marshallers is
   new PolyORB_HI.Marshallers_G
     (PolyORB_HI_Generated.Types.State);

  procedure Marshall
   (Data : PolyORB_HI_Generated.Types.State;
    Message : in out PolyORB_HI.Messages.Message_Type)
   renames State_Marshallers.Marshall;

  procedure Unmarshall
   (Data : out PolyORB_HI_Generated.Types.State;
    Message : in out PolyORB_HI.Messages.Message_Type)
   renames State_Marshallers.Unmarshall;

  --  Marshallers for interface type of thread controlrules.impl

  --------------
  -- Marshall -- 
  --------------

  procedure Marshall
   (Data : PolyORB_HI_Generated.Activity.syst_ControlRules_impl_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    use PolyORB_HI_Generated.Activity;
  begin
    if (Data.Port
      = PolyORB_HI_Generated.Activity.out_data)
    then
      PolyORB_HI_Generated.Marshallers.Marshall
       (Data.out_data_DATA,
        Message);
    elsif (Data.Port
      = PolyORB_HI_Generated.Activity.camera_out)
    then
      null;
    end if;
  end Marshall;

  ----------------
  -- Unmarshall -- 
  ----------------

  procedure Unmarshall
   (Port : PolyORB_HI_Generated.Activity.syst_ControlRules_impl_Port_Type;
    Data : out PolyORB_HI_Generated.Activity.syst_ControlRules_impl_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    video_not_recognized_DATA : PolyORB_HI_Generated.Types.State;
    motion_in_DATA : PolyORB_HI_Generated.Types.State;
    gate_in_DATA : PolyORB_HI_Generated.Types.State;
    use PolyORB_HI_Generated.Activity;
  begin
    if (Port
      = PolyORB_HI_Generated.Activity.video_not_recognized)
    then
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (video_not_recognized_DATA,
        Message);
      Data :=
       PolyORB_HI_Generated.Activity.syst_ControlRules_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.video_not_recognized,
          video_not_recognized_DATA => video_not_recognized_DATA);
    elsif (Port
      = PolyORB_HI_Generated.Activity.motion_in)
    then
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (motion_in_DATA,
        Message);
      Data :=
       PolyORB_HI_Generated.Activity.syst_ControlRules_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.motion_in,
          motion_in_DATA => motion_in_DATA);
    elsif (Port
      = PolyORB_HI_Generated.Activity.gate_in)
    then
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (gate_in_DATA,
        Message);
      Data :=
       PolyORB_HI_Generated.Activity.syst_ControlRules_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.gate_in,
          gate_in_DATA => gate_in_DATA);
    end if;
  end Unmarshall;

  --  Marshallers for interface type of thread awakemotion.impl

  --------------
  -- Marshall -- 
  --------------

  procedure Marshall
   (Data : PolyORB_HI_Generated.Activity.syst_AwakeMotion_impl_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    use PolyORB_HI_Generated.Activity;
  begin
    if (Data.Port
      = PolyORB_HI_Generated.Activity.motion_out)
    then
      PolyORB_HI_Generated.Marshallers.Marshall
       (Data.motion_out_DATA,
        Message);
    end if;
  end Marshall;

  ----------------
  -- Unmarshall -- 
  ----------------

  procedure Unmarshall
   (Port : PolyORB_HI_Generated.Activity.syst_AwakeMotion_impl_Port_Type;
    Data : out PolyORB_HI_Generated.Activity.syst_AwakeMotion_impl_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    motion_in_DATA : PolyORB_HI_Generated.Types.State;
    use PolyORB_HI_Generated.Activity;
  begin
    if (Port
      = PolyORB_HI_Generated.Activity.motion_in)
    then
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (motion_in_DATA,
        Message);
      Data :=
       PolyORB_HI_Generated.Activity.syst_AwakeMotion_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.motion_in,
          motion_in_DATA => motion_in_DATA);
    end if;
  end Unmarshall;

  --  Marshallers for interface type of thread awakerules.impl

  --------------
  -- Marshall -- 
  --------------

  procedure Marshall
   (Data : PolyORB_HI_Generated.Activity.syst_AwakeRules_impl_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    use PolyORB_HI_Generated.Activity;
  begin
    if (Data.Port
      = PolyORB_HI_Generated.Activity.coffee_out)
    then
      PolyORB_HI_Generated.Marshallers.Marshall
       (Data.coffee_out_DATA,
        Message);
    end if;
  end Marshall;

  ----------------
  -- Unmarshall -- 
  ----------------

  procedure Unmarshall
   (Port : PolyORB_HI_Generated.Activity.syst_AwakeRules_impl_Port_Type;
    Data : out PolyORB_HI_Generated.Activity.syst_AwakeRules_impl_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    motion_in_DATA : PolyORB_HI_Generated.Types.State;
    use PolyORB_HI_Generated.Activity;
  begin
    if (Port
      = PolyORB_HI_Generated.Activity.motion_in)
    then
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (motion_in_DATA,
        Message);
      Data :=
       PolyORB_HI_Generated.Activity.syst_AwakeRules_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.motion_in,
          motion_in_DATA => motion_in_DATA);
    end if;
  end Unmarshall;

  --  Marshallers for interface type of thread processvideo.impl

  --------------
  -- Marshall -- 
  --------------

  procedure Marshall
   (Data : PolyORB_HI_Generated.Activity.syst_ProcessVideo_impl_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    use PolyORB_HI_Generated.Activity;
  begin
    if (Data.Port
      = PolyORB_HI_Generated.Activity.video_data_out)
    then
      PolyORB_HI_Generated.Marshallers.Marshall
       (Data.video_data_out_DATA,
        Message);
    end if;
  end Marshall;

  ----------------
  -- Unmarshall -- 
  ----------------

  procedure Unmarshall
   (Port : PolyORB_HI_Generated.Activity.syst_ProcessVideo_impl_Port_Type;
    Data : out PolyORB_HI_Generated.Activity.syst_ProcessVideo_impl_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    video_in_DATA : PolyORB_HI_Generated.Types.State;
    use PolyORB_HI_Generated.Activity;
  begin
    if (Port
      = PolyORB_HI_Generated.Activity.video_in)
    then
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (video_in_DATA,
        Message);
      Data :=
       PolyORB_HI_Generated.Activity.syst_ProcessVideo_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.video_in,
          video_in_DATA => video_in_DATA);
    end if;
  end Unmarshall;

  --  Marshallers for interface type of thread carcheck.impl

  --------------
  -- Marshall -- 
  --------------

  procedure Marshall
   (Data : PolyORB_HI_Generated.Activity.syst_CarCheck_impl_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    use PolyORB_HI_Generated.Activity;
  begin
    if (Data.Port
      = PolyORB_HI_Generated.Activity.motion_out)
    then
      PolyORB_HI_Generated.Marshallers.Marshall
       (Data.motion_out_DATA,
        Message);
    end if;
  end Marshall;

  ----------------
  -- Unmarshall -- 
  ----------------

  procedure Unmarshall
   (Port : PolyORB_HI_Generated.Activity.syst_CarCheck_impl_Port_Type;
    Data : out PolyORB_HI_Generated.Activity.syst_CarCheck_impl_Interface;
    Message : in out PolyORB_HI.Messages.Message_Type)
  is
    motion_in_DATA : PolyORB_HI_Generated.Types.State;
    use PolyORB_HI_Generated.Activity;
  begin
    if (Port
      = PolyORB_HI_Generated.Activity.motion_in)
    then
      PolyORB_HI_Generated.Marshallers.Unmarshall
       (motion_in_DATA,
        Message);
      Data :=
       PolyORB_HI_Generated.Activity.syst_CarCheck_impl_Interface'
         (Port => PolyORB_HI_Generated.Activity.motion_in,
          motion_in_DATA => motion_in_DATA);
    end if;
  end Unmarshall;

end PolyORB_HI_Generated.Marshallers;
