--------------------------------------------------------
--  This file was automatically generated by Ocarina  --
--  Do NOT hand-modify this file, as your             --
--  changes will be lost when you re-run Ocarina      --
--------------------------------------------------------
pragma Style_Checks
 ("NM32766");

with PolyORB_HI_Generated.Types;
with PolyORB_HI.Errors;
with PolyORB_HI_Generated.Deployment;
with Ada.Real_Time;
with PolyORB_HI.Periodic_Task;
pragma Elaborate_All (PolyORB_HI.Periodic_Task);
with System;

package PolyORB_HI_Generated.Activity is

  --  BEGIN: Entities used by all instances of component ReadMotion.impl

  type syst_ReadMotion_impl_Port_Type is
   (motion_in,
    motion_out);

  type syst_ReadMotion_impl_Interface 
   (Port : syst_ReadMotion_impl_Port_Type := syst_ReadMotion_impl_Port_Type'First)
  is
    record
      case Port is
        when motion_in =>
          motion_in_DATA : PolyORB_HI_Generated.Types.State;
        when motion_out =>
          motion_out_DATA : PolyORB_HI_Generated.Types.State;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ReadMotion_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : syst_ReadMotion_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ReadMotion_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ReadMotion_impl_Port_Type)
   return syst_ReadMotion_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ReadMotion_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ReadMotion_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ReadMotion_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ReadMotion_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : syst_ReadMotion_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out syst_ReadMotion_impl_Port_Type);

  --  END: Entities used by all instances of component ReadMotion.impl

  --  Periodic task : the_thread_motion

  function syst_the_thread_motion_Job return PolyORB_HI.Errors.Error_Kind;

  package syst_the_thread_motion_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.the_controller_the_thread_motion_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (500),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (500),
      Task_Priority => 10,
      Task_Stack_Size => 100000,
      Job => syst_the_thread_motion_Job);

  --  BEGIN: Entities used by all instances of component ControlRules.impl

  type syst_ControlRules_impl_Port_Type is
   (video_not_recognized,
    motion_in,
    gate_in,
    out_data,
    camera_out);

  type syst_ControlRules_impl_Interface 
   (Port : syst_ControlRules_impl_Port_Type := syst_ControlRules_impl_Port_Type'First)
  is
    record
      case Port is
        when video_not_recognized =>
          video_not_recognized_DATA : PolyORB_HI_Generated.Types.State;
        when motion_in =>
          motion_in_DATA : PolyORB_HI_Generated.Types.State;
        when gate_in =>
          gate_in_DATA : PolyORB_HI_Generated.Types.State;
        when out_data =>
          out_data_DATA : PolyORB_HI_Generated.Types.State;
        when camera_out =>
          null;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ControlRules_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : syst_ControlRules_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ControlRules_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ControlRules_impl_Port_Type)
   return syst_ControlRules_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ControlRules_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ControlRules_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ControlRules_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ControlRules_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : syst_ControlRules_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out syst_ControlRules_impl_Port_Type);

  --  END: Entities used by all instances of component ControlRules.impl

  --  Periodic task : the_thread_control

  function syst_the_thread_control_Job return PolyORB_HI.Errors.Error_Kind;

  package syst_the_thread_control_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.the_controller_the_thread_control_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (100),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (100),
      Task_Priority => 9,
      Task_Stack_Size => 100000,
      Job => syst_the_thread_control_Job);

  --  BEGIN: Entities used by all instances of component AwakeMotion.impl

  type syst_AwakeMotion_impl_Port_Type is
   (motion_in,
    motion_out);

  type syst_AwakeMotion_impl_Interface 
   (Port : syst_AwakeMotion_impl_Port_Type := syst_AwakeMotion_impl_Port_Type'First)
  is
    record
      case Port is
        when motion_in =>
          motion_in_DATA : PolyORB_HI_Generated.Types.State;
        when motion_out =>
          motion_out_DATA : PolyORB_HI_Generated.Types.State;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeMotion_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : syst_AwakeMotion_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeMotion_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeMotion_impl_Port_Type)
   return syst_AwakeMotion_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeMotion_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeMotion_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeMotion_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeMotion_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : syst_AwakeMotion_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out syst_AwakeMotion_impl_Port_Type);

  --  END: Entities used by all instances of component AwakeMotion.impl

  --  Periodic task : the_thread_awake

  function syst_the_thread_awake_Job return PolyORB_HI.Errors.Error_Kind;

  package syst_the_thread_awake_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.the_controller_the_thread_awake_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (300000),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (300000),
      Task_Priority => 3,
      Task_Stack_Size => 100000,
      Job => syst_the_thread_awake_Job);

  --  BEGIN: Entities used by all instances of component AwakeRules.impl

  type syst_AwakeRules_impl_Port_Type is
   (motion_in,
    coffee_out);

  type syst_AwakeRules_impl_Interface 
   (Port : syst_AwakeRules_impl_Port_Type := syst_AwakeRules_impl_Port_Type'First)
  is
    record
      case Port is
        when motion_in =>
          motion_in_DATA : PolyORB_HI_Generated.Types.State;
        when coffee_out =>
          coffee_out_DATA : PolyORB_HI_Generated.Types.State;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeRules_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : syst_AwakeRules_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeRules_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeRules_impl_Port_Type)
   return syst_AwakeRules_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeRules_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeRules_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeRules_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_AwakeRules_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : syst_AwakeRules_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out syst_AwakeRules_impl_Port_Type);

  --  END: Entities used by all instances of component AwakeRules.impl

  --  Periodic task : the_thread_awake_rules

  function syst_the_thread_awake_rules_Job return PolyORB_HI.Errors.Error_Kind;

  package syst_the_thread_awake_rules_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.the_controller_the_thread_awake_rules_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (10000),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (10000),
      Task_Priority => System.Default_Priority,
      Task_Stack_Size => 100000,
      Job => syst_the_thread_awake_rules_Job);

  --  BEGIN: Entities used by all instances of component ProcessVideo.impl

  type syst_ProcessVideo_impl_Port_Type is
   (video_in,
    video_data_out);

  type syst_ProcessVideo_impl_Interface 
   (Port : syst_ProcessVideo_impl_Port_Type := syst_ProcessVideo_impl_Port_Type'First)
  is
    record
      case Port is
        when video_in =>
          video_in_DATA : PolyORB_HI_Generated.Types.State;
        when video_data_out =>
          video_data_out_DATA : PolyORB_HI_Generated.Types.State;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ProcessVideo_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : syst_ProcessVideo_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ProcessVideo_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ProcessVideo_impl_Port_Type)
   return syst_ProcessVideo_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ProcessVideo_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ProcessVideo_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ProcessVideo_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_ProcessVideo_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : syst_ProcessVideo_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out syst_ProcessVideo_impl_Port_Type);

  --  END: Entities used by all instances of component ProcessVideo.impl

  --  Periodic task : the_thread_video

  function syst_the_thread_video_Job return PolyORB_HI.Errors.Error_Kind;

  package syst_the_thread_video_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.the_controller_the_thread_video_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (1000),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (1000),
      Task_Priority => 7,
      Task_Stack_Size => 100000,
      Job => syst_the_thread_video_Job);

  --  BEGIN: Entities used by all instances of component CarCheck.impl

  type syst_CarCheck_impl_Port_Type is
   (motion_in,
    motion_out);

  type syst_CarCheck_impl_Interface 
   (Port : syst_CarCheck_impl_Port_Type := syst_CarCheck_impl_Port_Type'First)
  is
    record
      case Port is
        when motion_in =>
          motion_in_DATA : PolyORB_HI_Generated.Types.State;
        when motion_out =>
          motion_out_DATA : PolyORB_HI_Generated.Types.State;
        pragma Warnings (Off);
        when others =>
          null;
        pragma Warnings (On);
      end case;
    end record;

  function Send_Output
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_CarCheck_impl_Port_Type)
   return PolyORB_HI.Errors.Error_Kind;

  procedure Put_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : syst_CarCheck_impl_Interface);

  procedure Receive_Input
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_CarCheck_impl_Port_Type);

  function Get_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_CarCheck_impl_Port_Type)
   return syst_CarCheck_impl_Interface;

  function Get_Sender
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_CarCheck_impl_Port_Type)
   return PolyORB_HI_Generated.Deployment.Entity_Type;

  function Get_Count
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_CarCheck_impl_Port_Type)
   return Standard.Integer;

  function Get_Time_Stamp
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_CarCheck_impl_Port_Type)
   return Ada.Real_Time.Time;

  procedure Next_Value
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : syst_CarCheck_impl_Port_Type);

  procedure Store_Received_Message
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Thread_Interface : syst_CarCheck_impl_Interface;
    From : PolyORB_HI_Generated.Deployment.Entity_Type;
    Time_Stamp : Ada.Real_Time.Time :=
      Ada.Real_Time.Clock);

  procedure Wait_For_Incoming_Events
   (Entity : PolyORB_HI_Generated.Deployment.Entity_Type;
    Port : out syst_CarCheck_impl_Port_Type);

  --  END: Entities used by all instances of component CarCheck.impl

  --  Periodic task : the_thread_car

  function syst_the_thread_car_Job return PolyORB_HI.Errors.Error_Kind;

  package syst_the_thread_car_Task is
   new PolyORB_HI.Periodic_Task
     (Entity => PolyORB_HI_Generated.Deployment.the_controller_the_thread_car_K,
      Task_Period => Ada.Real_Time.Milliseconds
       (5000),
      Task_Deadline => Ada.Real_Time.Milliseconds
       (5000),
      Task_Priority => 6,
      Task_Stack_Size => 100000,
      Job => syst_the_thread_car_Job);

end PolyORB_HI_Generated.Activity;
