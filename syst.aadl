package syst
public
	with home_types;
	with deployment;
	
	system SmartHome
	end SmartHome;
	
	system implementation SmartHome.with_devices
		subcomponents
			the_motion_sensor: device MotionSensor.impl;
			the_car_sensor: device CarSensor.impl;
			the_awake_sensor: device AwakeSensor.impl;
			the_camera: device Camera.impl;
			the_alarm_unit: device AlarmUnit.impl;
			the_heater: device Heater.impl;
			the_light: device Light.impl;
			the_music: device Music.impl;
			the_coffee_maker: device CoffeeMaker.impl;
			the_garage_gate: device Garage.impl;
			the_security: device SecurityCenter.impl;
			the_controller: process Controller.with_threads;
			the_bus: bus HWConnection.impl;
			the_processor: processor MainProcessor.impl;
			
		connections
			camera_conn_out:port the_camera.video_stream->the_controller.video_from_camera;
			alarm_conn:port the_controller.alarm_out->the_alarm_unit.alarm_on_off;
			light_conn:port the_controller.light_out->the_light.light_on_off;
			garage_conn: port the_controller.gate_out->the_garage_gate.garage_on_off;
			coffee_conn: port the_controller.coffee_out -> the_coffee_maker.coffee_on_off;
			heater_conn:port the_controller.heat_out->the_heater.heater_on_off;
			music_conn:port the_controller.music_out->the_music.music_on_off;
			motion_conn:port the_motion_sensor.motion_detected->the_controller.motion_in;
			car_conn:port the_car_sensor.car_detected->the_controller.gate_in;
			awake_conn:port the_awake_sensor.awake_detected->the_controller.awake_in;
			camera_conn_in:port the_controller.camera_out->the_camera.camera_on_off;
			video_transfer:port the_controller.video_out->the_security.video_in;
			
			bus_motion:bus access the_bus <-> the_motion_sensor.bus_access;
			bus_car: bus access the_bus <-> the_car_sensor.bus_access;
			bus_awake: bus access the_bus <-> the_awake_sensor.bus_access;
			bus_coffee: bus access the_bus <-> the_coffee_maker.bus_access;
			bus_camer:bus access the_bus <-> the_camera.bus_access;
			bus_alarm:bus access the_bus <-> the_alarm_unit.bus_access;
			bus_heater:bus access the_bus <-> the_heater.bus_access;
			bus_light:bus access the_bus <-> the_light.bus_access;	
			bus_garage:bus access the_bus <-> the_garage_gate.bus_access;	
			bus_music:bus access the_bus <-> the_music.bus_access;			
			bus_processor:bus access the_bus <-> the_processor.bus_access;		
		PROPERTIES
  			Actual_Processor_Binding => (reference (the_processor)) applies to the_controller;
  			Actual_Memory_Binding => (reference (the_processor.the_ram)) applies to the_controller;
  			
  			Actual_Connection_Binding => (reference(the_bus)) applies to motion_conn;
  			Actual_Connection_Binding => (reference(the_bus)) applies to camera_conn_in;
  			Actual_Connection_Binding => (reference(the_bus)) applies to camera_conn_out;
  			Actual_Connection_Binding => (reference(the_bus)) applies to alarm_conn;
  			Actual_Connection_Binding => (reference(the_bus)) applies to light_conn;
  			Actual_Connection_Binding => (reference(the_bus)) applies to garage_conn;
  			Actual_Connection_Binding => (reference(the_bus)) applies to coffee_conn;
  			Actual_Connection_Binding => (reference(the_bus)) applies to heater_conn;
 			Actual_Connection_Binding => (reference(the_bus)) applies to music_conn;
 			Actual_Connection_Binding => (reference(the_bus)) applies to car_conn;
  			Actual_Connection_Binding => (reference(the_bus)) applies to awake_conn;
  			Actual_Connection_Binding => (reference(the_bus)) applies to video_transfer;
  			
			Priority => 10 applies to the_controller.the_thread_motion;
	        Priority => 09 applies to the_controller.the_thread_control;
	        Priority => 03 applies to the_controller.the_thread_awake;
	        Priority => 07 applies to the_controller.the_thread_video;
        	Priority => 06 applies to the_controller.the_thread_car;
			
	end SmartHome.with_devices;
	
	process Controller
	features
		video_from_camera: in data port home_types::State;

		video_out: out data port home_types::State;

		motion_in: in data port home_types::State;
		gate_in: in data port home_types::State;
		awake_in: in data port home_types::State;
		camera_out: out data port home_types::State;
		light_out: out data port home_types::State;
		gate_out: out data port home_types::State;
		coffee_out: out data port home_types::State;
		heat_out: out data port home_types::State;
		music_out: out data port home_types::State;
		alarm_out: out data port home_types::State;

	end Controller;
	
	process implementation Controller.with_threads
	subcomponents
		the_thread_motion: thread ReadMotion.impl;
		the_thread_control: thread ControlRules.impl;
		the_thread_awake: thread AwakeMotion.impl;
		the_thread_awake_rules: thread AwakeRules.impl;
		the_thread_video: thread ProcessVideo.impl;
		the_thread_car: thread CarCheck.impl;
	connections
		motion_thread_conn: port motion_in -> the_thread_motion.motion_in;
		motion_control_conn: port the_thread_motion.motion_out -> the_thread_control.motion_in;
		awake_thread_conn: port awake_in -> the_thread_awake.motion_in;
		awake_rules_conn: port the_thread_awake.motion_out -> the_thread_awake_rules.motion_in;
		camera_control_conn: port the_thread_control.camera_out -> camera_out;
		light_control_conn: port the_thread_control.light_out -> light_out;
		recognized_conn: port the_thread_video.video_not_recognized -> the_thread_control.video_not_recognized;
		coffee_control_conn: port the_thread_awake_rules.coffee_out -> coffee_out;
		heat_control_conn: port the_thread_control.heat_out -> heat_out;
		music_control_conn: port the_thread_control.music_out -> music_out;
		alarm_control_conn: port the_thread_control.alarm_out -> alarm_out;
		video_conn: port video_from_camera -> the_thread_video.video_in;
		video_transfer: port the_thread_video.video_out -> video_out;

		--video_control_conn: port the_thread_video.video_out -> the_thread_control.video_not_recognized;
		gate_control_conn: port the_thread_control.gate_out -> gate_out;
		car_thread_conn: port gate_in -> the_thread_car.motion_in;
		gate_thread_conn: port the_thread_car.motion_out -> the_thread_control.gate_in;

	end Controller.with_threads;
	
	thread ReadMotion
		features
			motion_in: in data port home_types::State;
			motion_out: out data port home_types::State;
	end ReadMotion;
	
	thread implementation ReadMotion.impl
		calls
			Mycalls: {
				Q: subprogram Motion_Processing;
			};
		connections
			c0: parameter motion_in -> Q.movement_data;
			c1: parameter Q.person_in_room -> motion_out; 
			
		PROPERTIES
		  Dispatch_Protocol => Periodic;
		  Compute_Execution_Time => 10ms .. 10ms;
		  Period => 500 ms;
	end ReadMotion.impl;
	
	SUBPROGRAM Motion_Processing
		FEATURES
			movement_data: in parameter home_types::State;
			person_in_room: out parameter home_types::State;
		properties
			source_language => (C);
			source_name => "readMotion";
			source_text => ("home.c");
	END Motion_Processing;
	
	
	thread CarCheck
		features
			motion_in: in data port home_types::State;
			motion_out: out data port home_types::State;
			
	end CarCheck;
	
	thread implementation CarCheck.impl
		calls
			Mycalls: {
				Q: subprogram Car_Processing;
			};
		connections
			c0: parameter motion_in -> Q.movement_data;
			c1: parameter Q.car_detected -> motion_out; 
		PROPERTIES
		  Dispatch_Protocol => Periodic;
		  Compute_Execution_Time => 20ms .. 20ms;
		  Period => 5000 ms;
	end CarCheck.impl;
	
	
	SUBPROGRAM Car_Processing
		FEATURES
			movement_data: in parameter home_types::State;
			car_detected: out parameter home_types::State;
		properties
			source_language => (C);
			source_name => "carCheck";
			source_text => ("home.c");
	END Car_Processing;
	
	thread AwakeMotion
		features
			motion_in: in data port home_types::State;
			motion_out: out data port home_types::State;
			
	end AwakeMotion;
	
	thread implementation AwakeMotion.impl
		calls
			Mycalls: {
				Q: subprogram Awake_Processing;
			};
		connections
			c0: parameter motion_in -> Q.movement_data;
			c1: parameter Q.motion_out -> motion_out; 
		PROPERTIES
		  Dispatch_Protocol => Periodic;
		  Compute_Execution_Time => 10ms .. 10ms;
		  Period => 300000 ms;
	end AwakeMotion.impl;
	
	SUBPROGRAM Awake_Processing
		FEATURES
			movement_data: in parameter home_types::State;
			motion_out: out parameter home_types::State;
		properties
			source_language => (C);
			source_name => "readMotion";
			source_text => ("home.c");
	END Awake_Processing;
	
	
	thread ControlRules
		features
			video_not_recognized: in data port home_types::State;
			motion_in: in data port home_types::State;
			camera_out: out data port home_types::State;
			light_out: out data port home_types::State;
			heat_out: out data port home_types::State;
			music_out: out data port home_types::State;
			alarm_out: out data port home_types::State;
			gate_in: in data port home_types::State;
			gate_out: out data port home_types::State;
	end ControlRules;
	
	thread implementation ControlRules.impl
		calls
			Mycalls: {
				Q: subprogram Control_Processing;
			};
		connections
			c0: parameter motion_in -> Q.movement_data;
			c1: parameter video_not_recognized -> Q.video_data;
			c2: parameter gate_in -> Q.gate_in;
			c3: parameter Q.camera_out -> camera_out;
			c4: parameter Q.light_out -> light_out;
			c5: parameter Q.heat_out -> heat_out;
			c6: parameter Q.music_out -> music_out;
			c7: parameter Q.alarm_out -> alarm_out;
			c8: parameter Q.gate_out -> gate_out;

		PROPERTIES
		  Dispatch_Protocol => Periodic;
		  Compute_Execution_Time => 10ms .. 10ms;
		  Period => 100 ms;
	end ControlRules.impl;
	
	SUBPROGRAM Control_Processing
		FEATURES
			movement_data: in parameter home_types::State;
			video_data: in parameter home_types::State;
			camera_out: out parameter home_types::State;
			light_out: out parameter home_types::State;
			heat_out: out parameter home_types::State;
			music_out: out parameter home_types::State;
			alarm_out: out parameter home_types::State;
			gate_in: in parameter home_types::State;
			gate_out: out parameter home_types::State;
			
		properties
			source_language => (C);
			source_name => "readMotion"; -- zmienić na inną funkcję
			source_text => ("home.c");
	END Control_Processing;
	
		
	thread AwakeRules
		features
			motion_in: in data port home_types::State;
			coffee_out: out data port home_types::State;
			
	end AwakeRules;
	
	thread implementation AwakeRules.impl
		calls
			Mycalls: {
				Q: subprogram Awake_Processing_Rules;
			};
		connections
			c0: parameter motion_in -> Q.movement_data;
			c1: parameter Q.coffee_out -> coffee_out; 
		PROPERTIES
		  Dispatch_Protocol => Periodic;
		  Compute_Execution_Time => 10ms .. 10ms;
		  Period => 10000 ms;
	end AwakeRules.impl;
	
	
	SUBPROGRAM Awake_Processing_Rules
		FEATURES
			movement_data: in parameter home_types::State;
			coffee_out: out parameter home_types::State;
		properties
			source_language => (C);
			source_name => "Awake_Proccessing_Rules"; -- zmienić funkcję
			source_text => ("home.c");
	END Awake_Processing_Rules;
	
	thread ProcessVideo
		features
			video_in: in data port home_types::State;	
			video_out: out data port home_types::State;
			video_not_recognized: out data port home_types::State;		
		
	end ProcessVideo;
	
	thread implementation ProcessVideo.impl
		calls
			Mycalls: {
				Q: subprogram Video_Processing;
			};
		connections
			c0: parameter video_in -> Q.video_in;
			c1: parameter Q.video_out -> video_out;
			c2: parameter Q.video_not_recognized -> video_not_recognized;
			
		PROPERTIES
		  Dispatch_Protocol => Periodic;
		  --Compute_Execution_Time => 50ms .. 500ms;
		  Compute_Execution_Time => 30ms .. 30ms;
		  Period => 1000 ms;
	end ProcessVideo.impl;
	
	SUBPROGRAM Video_Processing
		FEATURES
			video_in: in parameter home_types::State;
			video_out: out parameter home_types::State;
			video_not_recognized: out parameter home_types::State;
			
		properties
			source_language => (C);
			source_name => "readMotion"; -- zmienić funkcję
			source_text => ("home.c");
	END Video_Processing;
	
	processor MainProcessor	
		features
			bus_access: requires bus access HWConnection;
		PROPERTIES
			Clock_Period => 200ns;
		   	Scheduling_protocol => (posix_1003_highest_priority_first_protocol);
		   	Deployment::Execution_Platform => Native;
		   	Priority_Range => 1 .. 10;
	end MainProcessor;
	
	processor implementation MainProcessor.impl
		subcomponents
			the_ram: memory Ram.impl;
	end MainProcessor.impl;
	
--	memory Ram	
--	end Ram;
	
	MEMORY Ram
	  FEATURES
	    HWConnection : REQUIRES BUS ACCESS HWConnection;
	  END Ram;
	  
	 memory implementation RAM.impl
	 	
	 end RAM.impl;
	
	
	BUS HWConnection
	END HWConnection;
	 
	BUS implementation HWConnection.impl
		properties
	  		Deployment::Transport_API => BSD_Sockets;
	end HWConnection.impl;
	

	
	device MotionSensor
		features
			motion_detected: out data port home_types::State;
			bus_access: requires bus access HWConnection.impl;
	end MotionSensor;
	
	device implementation MotionSensor.impl
	end MotionSensor.impl;
	
	device CarSensor
		features
			car_detected: out data port home_types::State;
			bus_access: requires bus access HWConnection.impl;
	end CarSensor;
	
	device implementation CarSensor.impl
	end CarSensor.impl;
	
	device AwakeSensor
		features
			awake_detected: out data port home_types::State;
			bus_access: requires bus access HWConnection.impl;
	end AwakeSensor;
	
	device implementation AwakeSensor.impl
	end AwakeSensor.impl;
	
	device Camera
		features
			camera_on_off: in data port home_types::State;
			video_stream: out data port home_types::State;
			bus_access: requires bus access HWConnection.impl;
			
	end Camera;
	
	device implementation Camera.impl
	end Camera.impl;
	
	device Heater
		features
			heater_on_off: in data port home_types::State;
			bus_access: requires bus access HWConnection.impl;
			
	end Heater;
	
	device implementation Heater.impl
	end Heater.impl;
	
	
	device Light
		features
			light_on_off: in data port home_types::State;
			bus_access: requires bus access HWConnection.impl;
			
	end Light;
	
	device implementation Light.impl
	end Light.impl;
	
	device Garage
		features
			garage_on_off: in data port home_types::State;
			bus_access: requires bus access HWConnection.impl;
			
	end Garage;
	
	device implementation Garage.impl
	end Garage.impl;
	
	device CoffeeMaker
		features
			coffee_on_off: in data port home_types::State;
			bus_access: requires bus access HWConnection.impl;
			
	end CoffeeMaker;
	
	device implementation CoffeeMaker.impl
	end CoffeeMaker.impl;
	
	device Music
		features
			music_on_off: in data port home_types::State;
			bus_access: requires bus access HWConnection.impl;
			
	end Music;
	
	device implementation Music.impl
	end Music.impl;
	
	
	device SecurityCenter
		features
			video_in: in data port home_types::State;		
	end SecurityCenter;
	
	device implementation SecurityCenter.impl
	end SecurityCenter.impl;
	
	
	device AlarmUnit
		features
			alarm_on_off: in data port home_types::State;
			bus_access: requires bus access HWConnection.impl;
			
	end AlarmUnit;
	
	device implementation AlarmUnit.impl
	end AlarmUnit.impl;
end syst;